/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */

/*
 * Home row mods inspired by https://sunaku.github.io/home-row-mods.html#porting-to-zmk
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

// Layer names
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Symbol 3
#define LAYER_Game 4

// Special keys
#define HYPER LC(LS(LG(LALT)))
#define MEH LC(LS(LALT))

// Homerow mod configuration. Separate values for index finger mods.
// ---
// Time before a hold is triggered.
#define HOLDING_TIME_DEFAULT_MS 250
#define HOLDING_TIME_INDEX_MS 250
// How long you need to wait after typing before home row mods can be used again.
#define STREAK_DECAY_DEFAULT_MS 250
#define STREAK_DECAY_INDEX_MS 150
// How much time you have left after tapping a key to hold it again in order to make it auto-repeat.
#define REPEAT_DECAY_DEFAULT_MS 300
#define REPEAT_DECAY_INDEX_MS 300

// Configure caps word to not terminate on hyphens (kebab-case) or backspace.
&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

// System commands
/ {
  behaviors {
    // Lower layer key. Tap dance to toggle the layer on double tap.
    lower: lower {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
    };
    // Game layer key. Tap dance to toggle the layer on double tap.
    game: game {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo LAYER_Game>, <&to LAYER_Game>;
    };
    // Magic key. Hold for RGB status display.
    magic: magic {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&rgb_ug_status_macro>;
    };
  };

  macros {
    rgb_ug_status_macro: rgb_ug_status_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_STATUS>;
    };
  };
};

// Bluetooth
/ {
  behaviors {
    bt_0: bt_0 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt_select_0>, <&bt BT_DISC 0>;
    };
    bt_1: bt_1 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt_select_1>, <&bt BT_DISC 1>;
    };
    bt_2: bt_2 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt_select_2>, <&bt BT_DISC 2>;
    };
    bt_3: bt_3 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&bt_select_3>, <&bt BT_DISC 3>;
    };
  };

  macros {
    bt_select_0: bt_select_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
    };
    bt_select_1: bt_select_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
    };
    bt_select_2: bt_select_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
    };
    bt_select_3: bt_select_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
    };
  };
};

// Bilateral homerow mods
/ {
  behaviors {
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72

    hrl: homerow_left_hand {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_DEFAULT_MS>;
        quick-tap-ms = <REPEAT_DECAY_DEFAULT_MS>;
        require-prior-idle-ms = <STREAK_DECAY_DEFAULT_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrr: homerow_right_hand {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_DEFAULT_MS>;
        quick-tap-ms = <REPEAT_DECAY_DEFAULT_MS>;
        require-prior-idle-ms = <STREAK_DECAY_DEFAULT_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrli: homerow_left_hand_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_INDEX_MS>;
        quick-tap-ms = <REPEAT_DECAY_INDEX_MS>;
        require-prior-idle-ms = <STREAK_DECAY_INDEX_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrri: homerow_right_hand_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_INDEX_MS>;
        quick-tap-ms = <REPEAT_DECAY_INDEX_MS>;
        require-prior-idle-ms = <STREAK_DECAY_INDEX_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrll: homerow_left_hand_layer {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_DEFAULT_MS>;
        quick-tap-ms = <REPEAT_DECAY_DEFAULT_MS>;
        require-prior-idle-ms = <STREAK_DECAY_DEFAULT_MS>;
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    hrrl: homerow_right_hand_layer {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;  // Allow pressing multiple homerow mods at once.
        tapping-term-ms = <HOLDING_TIME_DEFAULT_MS>;
        quick-tap-ms = <REPEAT_DECAY_DEFAULT_MS>;
        require-prior-idle-ms = <STREAK_DECAY_DEFAULT_MS>;
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    layer_Base {
      bindings = <
               &kp F1       &kp F2                 &kp F3       &kp F4         &kp F5                                                                                      &kp F6       &kp F7                 &kp F8          &kp F9    &kp F10
            &kp EQUAL       &kp N1                 &kp N2       &kp N3         &kp N4  &kp N5                                                               &kp N6         &kp N7       &kp N8                 &kp N9          &kp N0  &kp MINUS
            &kp GRAVE        &kp Q   &hrll LAYER_Symbol W        &kp E          &kp R   &kp T                                                                &kp Y          &kp U        &kp I   &hrrl LAYER_Symbol O           &kp P   &kp BSLH
              &kp ESC  &hrl LALT A           &hrl LCTRL S  &hrl LGUI D  &hrli LSHFT F   &kp G                                                                &kp H  &hrri LSHFT J  &hrr LGUI K           &hrr LCTRL L  &hrr LALT SEMI    &kp SQT
            &kp LSHFT        &kp Z                  &kp X        &kp C          &kp V   &kp B   &kp TAB   &lower  &kp LCTRL  &kp LGUI   &lower  &caps_word   &kp N          &kp M    &kp COMMA                &kp DOT        &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0     &kp HOME                &kp END     &kp LEFT      &kp RIGHT          &kp BSPC  &kp DEL      &game  &kp LALT  &kp RET   &kp SPACE                 &kp UP     &kp DOWN               &kp LBKT        &kp RBKT  &kp PG_DN
      >;
    };

    // Lower layer with numpad on the right and modifiers for use with the mouse on the left.
    layer_Lower {
      bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                          &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans       &kp F11     &kp F12       &none      &none   &kp HOME                                                     &kp LPAR  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none       &none   &kp GLOBE      &none    &kp END                                                     &kp RPAR   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans      &kp LALT   &kp LCTRL    &kp LGUI  &kp LSHFT  &kp PG_UP                                                  &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp LG(Z)   &kp LG(X)   &kp LG(C)  &kp LG(V)  &kp PG_DN  &trans   &to 0  &trans  &trans   &to 0  &trans    &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS     &kp INS       &none      &none             &trans  &trans   &to 0  &trans  &trans  &trans                &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
      >;
    };

    // Default magic layer.
    layer_Magic {
      bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
      >;
    };

    // Symbol layer accessed through home row mods.
    // Common symbol combinations: "->", "!=", "/*", "#!"
    layer_Symbol {
      bindings = <
        &none      &none      &none      &none      &none                                                                                 &none      &none     &none       &none    &none
        &none      &none      &none      &none      &none    &none                                                             &none      &none      &none     &none       &none    &none
        &none  &kp CARET   &kp AMPS  &kp UNDER   &kp EXCL   &kp AT                                                             &none   &kp HASH  &kp EQUAL  &kp PIPE  &kp DOLLAR    &none
        &none   &kp PLUS   &kp LBKT   &kp LBRC   &kp LPAR  &kp DQT                                                           &kp SQT   &kp RPAR   &kp RBRC  &kp RBKT   &kp MINUS    &none
        &none   &kp BSLH  &kp PRCNT  &kp GRAVE     &kp LT    &none   &trans    &none    &none    &none    &none  &kp LSHFT     &none     &kp GT  &kp TILDE  &kp STAR    &kp FSLH    &none
        &none      &none      &none      &none      &none            &trans   &trans    &none    &none   &trans     &trans                &none      &none     &none       &none    &none
      >;
    };

    // Layer suitable for use when playing games.
    // - Left hand letters, including WASD, are shifted one position right.
    // - hjkl are arrows.
    // - Escape button at the top left.
    // - Alt on left thumb button to make it easy to hold down.
    // - No homerow mods.
    layer_Game {
      bindings = <
              &kp ESC     &kp F2  &kp F3    &kp F4     &kp F5                                                                                    &kp F6     &kp F7     &kp F8    &kp F9    &kp F10
            &kp EQUAL     &kp N1  &kp N2    &kp N3     &kp N4  &kp N5                                                                  &kp N6    &kp N7     &kp N8     &kp N9    &kp N0  &kp MINUS
                &kp T    &kp TAB   &kp Q     &kp W      &kp E   &kp R                                                                   &kp Y     &kp U      &kp I      &kp O     &kp P   &kp BSLH
                &kp G  &kp LSHFT   &kp A     &kp S      &kp D   &kp F                                                                &kp LEFT  &kp DOWN     &kp UP  &kp RIGHT  &kp SEMI    &kp SQT
                &kp B  &kp LCTRL   &kp Z     &kp X      &kp C   &kp V   &kp TAB    &to 0  &kp LCTRL  &kp LCMD      &to 0  &kp LSHFT     &kp N     &kp M  &kp COMMA    &kp DOT  &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0   &kp LCMD   &none  &kp LEFT  &kp RIGHT          &kp LALT  &kp DEL      &to 0  &kp LALT  &kp ENTER  &kp SPACE              &kp UP   &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
      >;
    };
  };
};

/* Empty layer template
    layer_Empty {
      bindings = <
        &none    &none    &none    &none    &none                                                                            &none    &none    &none    &none    &none
        &none    &none    &none    &none    &none    &none                                                          &none    &none    &none    &none    &none    &none
        &none    &none    &none    &none    &none    &none                                                          &none    &none    &none    &none    &none    &none
        &none    &none    &none    &none    &none    &none                                                          &none    &none    &none    &none    &none    &none
        &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none
        &none    &none    &none    &none    &none             &none    &none    &none    &none    &none    &none             &none    &none    &none    &none    &none
      >;
    };
*/
